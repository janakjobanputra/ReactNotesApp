{"ast":null,"code":"import _objectSpread from \"/Users/janakjobanputra/Documents/Git/ReactNotesApp/react-notes/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _regeneratorRuntime from \"/Users/janakjobanputra/Documents/Git/ReactNotesApp/react-notes/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/janakjobanputra/Documents/Git/ReactNotesApp/react-notes/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/janakjobanputra/Documents/Git/ReactNotesApp/react-notes/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/janakjobanputra/Documents/Git/ReactNotesApp/react-notes/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport PouchDB from 'pouchdb';\n\nvar DB =\n/*#__PURE__*/\nfunction () {\n  function DB(name) {\n    _classCallCheck(this, DB);\n\n    this.db = new PouchDB('react-notes');\n  }\n\n  _createClass(DB, [{\n    key: \"getAllNotes\",\n    value: function () {\n      var _getAllNotes = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var allNotes, notes;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.db.allDocs({\n                  include_docs: true\n                });\n\n              case 2:\n                allNotes = _context.sent;\n                notes = {};\n                allNotes.rows.forEach(function (n) {\n                  return notes[n.id] = n.doc;\n                });\n                return _context.abrupt(\"return\", notes);\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function getAllNotes() {\n        return _getAllNotes.apply(this, arguments);\n      };\n    }()\n  }, {\n    key: \"createNote\",\n    value: function () {\n      var _createNote = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(note) {\n        var res;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                note.createdAt = new Date();\n                note.updatedAt = new Date();\n                _context2.next = 4;\n                return this.db.post(_objectSpread({}, note));\n\n              case 4:\n                res = _context2.sent;\n                return _context2.abrupt(\"return\", res);\n\n              case 6:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function createNote(_x) {\n        return _createNote.apply(this, arguments);\n      };\n    }()\n  }, {\n    key: \"updateNote\",\n    value: function () {\n      var _updateNote = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3(note) {\n        var res;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                note.updatedAt = new Date();\n                _context3.next = 3;\n                return this.db.put(_objectSpread({}, note));\n\n              case 3:\n                res = _context3.sent;\n                return _context3.abrupt(\"return\", res);\n\n              case 5:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      return function updateNote(_x2) {\n        return _updateNote.apply(this, arguments);\n      };\n    }()\n  }, {\n    key: \"deleteNote\",\n    value: function () {\n      var _deleteNote = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee4(note) {\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return this.db.remove(note);\n\n              case 2:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      return function deleteNote(_x3) {\n        return _deleteNote.apply(this, arguments);\n      };\n    }()\n  }, {\n    key: \"deleteAllNotes\",\n    value: function () {\n      var _deleteAllNotes = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee5() {\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return this.db.destroy().then(function () {\n                  console.log(\"deleted all notes\");\n                });\n\n              case 2:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      return function deleteAllNotes() {\n        return _deleteAllNotes.apply(this, arguments);\n      };\n    }()\n  }]);\n\n  return DB;\n}();\n\nexport { DB as default };","map":{"version":3,"sources":["/Users/janakjobanputra/Documents/Git/ReactNotesApp/react-notes/src/db.js"],"names":["PouchDB","DB","name","db","allDocs","include_docs","allNotes","notes","rows","forEach","n","id","doc","note","createdAt","Date","updatedAt","post","res","put","remove","destroy","then","console","log"],"mappings":";;;;;AAAA,OAAOA,OAAP,MAAoB,SAApB;;IAEqBC,E;;;AACjB,cAAYC,IAAZ,EAAkB;AAAA;;AACd,SAAKC,EAAL,GAAU,IAAIH,OAAJ,CAAY,aAAZ,CAAV;AACH;;;;;;;;;;;;;;uBAGwB,KAAKG,EAAL,CAAQC,OAAR,CAAgB;AAAEC,kBAAAA,YAAY,EAAE;AAAhB,iBAAhB,C;;;AAAjBC,gBAAAA,Q;AACAC,gBAAAA,K,GAAQ,E;AAEZD,gBAAAA,QAAQ,CAACE,IAAT,CAAcC,OAAd,CAAsB,UAAAC,CAAC;AAAA,yBAAIH,KAAK,CAACG,CAAC,CAACC,EAAH,CAAL,GAAcD,CAAC,CAACE,GAApB;AAAA,iBAAvB;iDAEOL,K;;;;;;;;;;;;;;;;;;;iDAGMM,I;;;;;;AACbA,gBAAAA,IAAI,CAACC,SAAL,GAAiB,IAAIC,IAAJ,EAAjB;AACAF,gBAAAA,IAAI,CAACG,SAAL,GAAiB,IAAID,IAAJ,EAAjB;;uBAEkB,KAAKZ,EAAL,CAAQc,IAAR,mBAAkBJ,IAAlB,E;;;AAAZK,gBAAAA,G;kDAECA,G;;;;;;;;;;;;;;;;;;;iDAGML,I;;;;;;AACbA,gBAAAA,IAAI,CAACG,SAAL,GAAiB,IAAID,IAAJ,EAAjB;;uBAEkB,KAAKZ,EAAL,CAAQgB,GAAR,mBAAiBN,IAAjB,E;;;AAAZK,gBAAAA,G;kDACCA,G;;;;;;;;;;;;;;;;;;;iDAGML,I;;;;;;uBACP,KAAKV,EAAL,CAAQiB,MAAR,CAAeP,IAAf,C;;;;;;;;;;;;;;;;;;;;;;;;;uBAIA,KAAKV,EAAL,CAAQkB,OAAR,GAAkBC,IAAlB,CAAuB,YAAU;AACnCC,kBAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACH,iBAFK,C;;;;;;;;;;;;;;;;;;;SAnCOvB,E","sourcesContent":["import PouchDB from 'pouchdb';\n\nexport default class DB {\n    constructor(name) {\n        this.db = new PouchDB('react-notes');\n    }\n\n    async getAllNotes() {\n        let allNotes = await this.db.allDocs({ include_docs: true});\n        let notes = {};\n\n        allNotes.rows.forEach(n => notes[n.id] = n.doc)\n\n        return notes;\n    }\n\n    async createNote(note) {\n        note.createdAt = new Date();\n        note.updatedAt = new Date();\n\n        const res = await this.db.post({ ...note });\n        \n        return res\n    }\n\n    async updateNote(note) {\n        note.updatedAt = new Date();\n\n        const res = await this.db.put({ ...note });\n        return res;\n    }\n\n    async deleteNote(note) {\n        await this.db.remove(note);\n    }\n\n    async deleteAllNotes() {\n        await this.db.destroy().then(function(){\n            console.log(\"deleted all notes\")\n        })\n    }\n}"]},"metadata":{},"sourceType":"module"}