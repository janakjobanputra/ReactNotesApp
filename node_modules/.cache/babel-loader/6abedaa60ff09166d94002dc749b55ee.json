{"ast":null,"code":"import _objectSpread from \"/Users/janakjobanputra/Documents/Git/ReactNotesApp/react-notes/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _regeneratorRuntime from \"/Users/janakjobanputra/Documents/Git/ReactNotesApp/react-notes/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/janakjobanputra/Documents/Git/ReactNotesApp/react-notes/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/janakjobanputra/Documents/Git/ReactNotesApp/react-notes/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/janakjobanputra/Documents/Git/ReactNotesApp/react-notes/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport PouchDB from 'pouchdb';\n\nvar DB =\n/*#__PURE__*/\nfunction () {\n  function DB(name) {\n    _classCallCheck(this, DB);\n\n    this.notesDb = new PouchDB('react-notes');\n    this.folderDb = new PouchDB('react-folders');\n  } //All Folder Functions\n\n\n  _createClass(DB, [{\n    key: \"getAllFolders\",\n    value: function () {\n      var _getAllFolders = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var allFolders, folders;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.folderDb.allDocs({\n                  include_docs: true\n                });\n\n              case 2:\n                allFolders = _context.sent;\n                folders = {};\n                allFolders.rows.forEach(function (f) {\n                  return folders[f.id] = f.doc;\n                });\n                return _context.abrupt(\"return\", folders);\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function getAllFolders() {\n        return _getAllFolders.apply(this, arguments);\n      };\n    }()\n  }, {\n    key: \"createFolder\",\n    value: function () {\n      var _createFolder = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(folder) {\n        var res;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                folder.createdAt = new Date();\n                folder.updatedAt = new Date();\n                console.log(\"creating folder\", folder);\n                _context2.next = 5;\n                return this.folderDb.post(_objectSpread({}, folder));\n\n              case 5:\n                res = _context2.sent;\n                return _context2.abrupt(\"return\", res);\n\n              case 7:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function createFolder(_x) {\n        return _createFolder.apply(this, arguments);\n      };\n    }() //All Notes Functions\n\n  }, {\n    key: \"getAllNotes\",\n    value: function () {\n      var _getAllNotes = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3() {\n        var allNotes, notes;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return this.notesDb.allDocs({\n                  include_docs: true\n                });\n\n              case 2:\n                allNotes = _context3.sent;\n                notes = {};\n                allNotes.rows.forEach(function (n) {\n                  return notes[n.id] = n.doc;\n                });\n                return _context3.abrupt(\"return\", notes);\n\n              case 6:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      return function getAllNotes() {\n        return _getAllNotes.apply(this, arguments);\n      };\n    }()\n  }, {\n    key: \"createNote\",\n    value: function () {\n      var _createNote = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee4(note) {\n        var res;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                note.createdAt = new Date();\n                note.updatedAt = new Date();\n                _context4.next = 4;\n                return this.notesDb.post(_objectSpread({}, note));\n\n              case 4:\n                res = _context4.sent;\n                return _context4.abrupt(\"return\", res);\n\n              case 6:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      return function createNote(_x2) {\n        return _createNote.apply(this, arguments);\n      };\n    }()\n  }, {\n    key: \"updateNote\",\n    value: function () {\n      var _updateNote = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee5(note) {\n        var res;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                note.updatedAt = new Date();\n                _context5.next = 3;\n                return this.notesDb.put(_objectSpread({}, note));\n\n              case 3:\n                res = _context5.sent;\n                return _context5.abrupt(\"return\", res);\n\n              case 5:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      return function updateNote(_x3) {\n        return _updateNote.apply(this, arguments);\n      };\n    }()\n  }, {\n    key: \"deleteNote\",\n    value: function () {\n      var _deleteNote = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee6(note) {\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                _context6.next = 2;\n                return this.notesDb.remove(note);\n\n              case 2:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      return function deleteNote(_x4) {\n        return _deleteNote.apply(this, arguments);\n      };\n    }()\n  }, {\n    key: \"deleteAll\",\n    value: function () {\n      var _deleteAll = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee7() {\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                _context7.next = 2;\n                return this.notesDb.destroy();\n\n              case 2:\n                console.log(\"deleted all notes\");\n                this.notesDb = new PouchDB('react-notes');\n                this.folderDb = new PouchDB('react-folders');\n\n              case 5:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n\n      return function deleteAll() {\n        return _deleteAll.apply(this, arguments);\n      };\n    }()\n  }]);\n\n  return DB;\n}();\n\nexport { DB as default };","map":{"version":3,"sources":["/Users/janakjobanputra/Documents/Git/ReactNotesApp/react-notes/src/db.js"],"names":["PouchDB","DB","name","notesDb","folderDb","allDocs","include_docs","allFolders","folders","rows","forEach","f","id","doc","folder","createdAt","Date","updatedAt","console","log","post","res","allNotes","notes","n","note","put","remove","destroy"],"mappings":";;;;;AAAA,OAAOA,OAAP,MAAoB,SAApB;;IAEqBC,E;;;AACjB,cAAYC,IAAZ,EAAkB;AAAA;;AACd,SAAKC,OAAL,GAAe,IAAIH,OAAJ,CAAY,aAAZ,CAAf;AACA,SAAKI,QAAL,GAAgB,IAAIJ,OAAJ,CAAY,eAAZ,CAAhB;AACH,G,CAED;;;;;;;;;;;;;;;uBAE2B,KAAKI,QAAL,CAAcC,OAAd,CAAsB;AAAEC,kBAAAA,YAAY,EAAE;AAAhB,iBAAtB,C;;;AAAnBC,gBAAAA,U;AACAC,gBAAAA,O,GAAU,E;AAEdD,gBAAAA,UAAU,CAACE,IAAX,CAAgBC,OAAhB,CAAwB,UAAAC,CAAC;AAAA,yBAAIH,OAAO,CAACG,CAAC,CAACC,EAAH,CAAP,GAAgBD,CAAC,CAACE,GAAtB;AAAA,iBAAzB;iDAEOL,O;;;;;;;;;;;;;;;;;;;iDAGQM,M;;;;;;AACfA,gBAAAA,MAAM,CAACC,SAAP,GAAmB,IAAIC,IAAJ,EAAnB;AACAF,gBAAAA,MAAM,CAACG,SAAP,GAAmB,IAAID,IAAJ,EAAnB;AACAE,gBAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+BL,MAA/B;;uBACkB,KAAKV,QAAL,CAAcgB,IAAd,mBAAwBN,MAAxB,E;;;AAAZO,gBAAAA,G;kDACCA,G;;;;;;;;;;;;;QAGX;;;;;;;;;;;;;;uBAEyB,KAAKlB,OAAL,CAAaE,OAAb,CAAqB;AAAEC,kBAAAA,YAAY,EAAE;AAAhB,iBAArB,C;;;AAAjBgB,gBAAAA,Q;AACAC,gBAAAA,K,GAAQ,E;AAEZD,gBAAAA,QAAQ,CAACb,IAAT,CAAcC,OAAd,CAAsB,UAAAc,CAAC;AAAA,yBAAID,KAAK,CAACC,CAAC,CAACZ,EAAH,CAAL,GAAcY,CAAC,CAACX,GAApB;AAAA,iBAAvB;kDAEOU,K;;;;;;;;;;;;;;;;;;;iDAGME,I;;;;;;AACbA,gBAAAA,IAAI,CAACV,SAAL,GAAiB,IAAIC,IAAJ,EAAjB;AACAS,gBAAAA,IAAI,CAACR,SAAL,GAAiB,IAAID,IAAJ,EAAjB;;uBAEkB,KAAKb,OAAL,CAAaiB,IAAb,mBAAuBK,IAAvB,E;;;AAAZJ,gBAAAA,G;kDAECA,G;;;;;;;;;;;;;;;;;;;iDAGMI,I;;;;;;AACbA,gBAAAA,IAAI,CAACR,SAAL,GAAiB,IAAID,IAAJ,EAAjB;;uBAEkB,KAAKb,OAAL,CAAauB,GAAb,mBAAsBD,IAAtB,E;;;AAAZJ,gBAAAA,G;kDACCA,G;;;;;;;;;;;;;;;;;;;iDAGMI,I;;;;;;uBACP,KAAKtB,OAAL,CAAawB,MAAb,CAAoBF,IAApB,C;;;;;;;;;;;;;;;;;;;;;;;;;uBAIA,KAAKtB,OAAL,CAAayB,OAAb,E;;;AACNV,gBAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACA,qBAAKhB,OAAL,GAAe,IAAIH,OAAJ,CAAY,aAAZ,CAAf;AACA,qBAAKI,QAAL,GAAgB,IAAIJ,OAAJ,CAAY,eAAZ,CAAhB;;;;;;;;;;;;;;;;;;;SA1DaC,E","sourcesContent":["import PouchDB from 'pouchdb';\n\nexport default class DB {\n    constructor(name) {\n        this.notesDb = new PouchDB('react-notes');\n        this.folderDb = new PouchDB('react-folders');\n    }\n\n    //All Folder Functions\n    async getAllFolders() {\n        let allFolders = await this.folderDb.allDocs({ include_docs: true});\n        let folders = {};\n\n        allFolders.rows.forEach(f => folders[f.id] = f.doc)\n\n        return folders;\n    }\n\n    async createFolder(folder) {\n        folder.createdAt = new Date();\n        folder.updatedAt = new Date();\n        console.log(\"creating folder\", folder)\n        const res = await this.folderDb.post({ ...folder });\n        return res\n    }\n\n    //All Notes Functions\n    async getAllNotes() {\n        let allNotes = await this.notesDb.allDocs({ include_docs: true});\n        let notes = {};\n\n        allNotes.rows.forEach(n => notes[n.id] = n.doc)\n\n        return notes;\n    }\n\n    async createNote(note) {\n        note.createdAt = new Date();\n        note.updatedAt = new Date();\n\n        const res = await this.notesDb.post({ ...note });\n        \n        return res\n    }\n\n    async updateNote(note) {\n        note.updatedAt = new Date();\n\n        const res = await this.notesDb.put({ ...note });\n        return res;\n    }\n\n    async deleteNote(note) {\n        await this.notesDb.remove(note);\n    }\n\n    async deleteAll() {\n        await this.notesDb.destroy()\n        console.log(\"deleted all notes\")\n        this.notesDb = new PouchDB('react-notes');\n        this.folderDb = new PouchDB('react-folders');\n    }\n}"]},"metadata":{},"sourceType":"module"}