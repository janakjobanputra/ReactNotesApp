{"ast":null,"code":"import _classCallCheck from \"/Users/janakjobanputra/Documents/Git/ReactNotesApp/react-notes/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/janakjobanputra/Documents/Git/ReactNotesApp/react-notes/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/janakjobanputra/Documents/Git/ReactNotesApp/react-notes/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/janakjobanputra/Documents/Git/ReactNotesApp/react-notes/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/janakjobanputra/Documents/Git/ReactNotesApp/react-notes/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/janakjobanputra/Documents/Git/ReactNotesApp/react-notes/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/janakjobanputra/Documents/Git/ReactNotesApp/react-notes/src/pages/search.js\";\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport SearchInput, { createFilter } from 'react-search-input';\nimport NoteList from '../components/notelist';\nvar KEYS_TO_FILTERS = ['tags.text'];\n\nvar SearchPage =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(SearchPage, _React$Component);\n\n  function SearchPage(props) {\n    var _this;\n\n    _classCallCheck(this, SearchPage);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(SearchPage).call(this, props));\n    var notes = Object.values(props.notes);\n    notes.sort(function (a, b) {\n      return new Date(b.updatedAt) - new Date(a.updatedAt);\n    });\n    _this.state = {\n      notes: notes,\n      searchTerm: ''\n    };\n    _this.searchUpdated = _this.searchUpdated.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(SearchPage, [{\n    key: \"searchUpdated\",\n    value: function searchUpdated(term) {\n      this.setState({\n        searchTerm: term\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var notes = this.state.notes;\n      var filteredNotes = notes.filter(createFilter(this.state.searchTerm, KEYS_TO_FILTERS));\n\n      if (!notes.length) {\n        return React.createElement(\"div\", {\n          className: \"app-intro\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 32\n          },\n          __self: this\n        }, React.createElement(\"h2\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 33\n          },\n          __self: this\n        }, \" There are no notes to search! \"));\n      }\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40\n        },\n        __self: this\n      }, \"Search By Tag\"), React.createElement(\"div\", {\n        className: \"note-form-field\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41\n        },\n        __self: this\n      }, React.createElement(SearchInput, {\n        className: \"search-input\",\n        onChange: this.searchUpdated,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42\n        },\n        __self: this\n      }), React.createElement(NoteList, {\n        notes: filteredNotes,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return SearchPage;\n}(React.Component);\n\nexport { SearchPage as default };","map":{"version":3,"sources":["/Users/janakjobanputra/Documents/Git/ReactNotesApp/react-notes/src/pages/search.js"],"names":["React","Link","SearchInput","createFilter","NoteList","KEYS_TO_FILTERS","SearchPage","props","notes","Object","values","sort","a","b","Date","updatedAt","state","searchTerm","searchUpdated","bind","term","setState","filteredNotes","filter","length","Component"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,IAAT,QAAqB,kBAArB;AACA,OAAOC,WAAP,IAAqBC,YAArB,QAAwC,oBAAxC;AACA,OAAOC,QAAP,MAAqB,wBAArB;AAEA,IAAMC,eAAe,GAAG,CAAC,WAAD,CAAxB;;IAEqBC,U;;;;;AACjB,sBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACf,oFAAMA,KAAN;AAEA,QAAIC,KAAK,GAAGC,MAAM,CAACC,MAAP,CAAcH,KAAK,CAACC,KAApB,CAAZ;AACAA,IAAAA,KAAK,CAACG,IAAN,CAAY,UAACC,CAAD,EAAGC,CAAH;AAAA,aAAS,IAAIC,IAAJ,CAASD,CAAC,CAACE,SAAX,IAAwB,IAAID,IAAJ,CAASF,CAAC,CAACG,SAAX,CAAjC;AAAA,KAAZ;AAEA,UAAKC,KAAL,GAAa;AACTR,MAAAA,KAAK,EAALA,KADS;AAETS,MAAAA,UAAU,EAAC;AAFF,KAAb;AAIA,UAAKC,aAAL,GAAqB,MAAKA,aAAL,CAAmBC,IAAnB,uDAArB;AAVe;AAWlB;;;;kCAEcC,I,EAAM;AACjB,WAAKC,QAAL,CAAc;AAACJ,QAAAA,UAAU,EAAEG;AAAb,OAAd;AACH;;;6BAEQ;AAAA,UACCZ,KADD,GACW,KAAKQ,KADhB,CACCR,KADD;AAEL,UAAMc,aAAa,GAAGd,KAAK,CAACe,MAAN,CAAapB,YAAY,CAAC,KAAKa,KAAL,CAAWC,UAAZ,EAAwBZ,eAAxB,CAAzB,CAAtB;;AAEA,UAAG,CAACG,KAAK,CAACgB,MAAV,EAAkB;AACd,eACI;AAAK,UAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CADJ,CADJ;AAKH;;AAED,aACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBADJ,EAEI;AAAK,QAAA,SAAS,EAAC,iBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,WAAD;AAAa,QAAA,SAAS,EAAC,cAAvB;AAAsC,QAAA,QAAQ,EAAE,KAAKN,aAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,EAEI,oBAAC,QAAD;AAAU,QAAA,KAAK,EAAEI,aAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFJ,CAFJ,CADJ;AASH;;;;EAvCmCtB,KAAK,CAACyB,S;;SAAzBnB,U","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\nimport SearchInput, {createFilter} from 'react-search-input';\nimport NoteList from '../components/notelist';\n\nconst KEYS_TO_FILTERS = ['tags.text']\n\nexport default class SearchPage extends React.Component {\n    constructor(props) {\n        super(props);\n\n        let notes = Object.values(props.notes)\n        notes.sort( (a,b) => new Date(b.updatedAt) - new Date(a.updatedAt) );\n\n        this.state = { \n            notes, \n            searchTerm:''\n        };\n        this.searchUpdated = this.searchUpdated.bind(this)\n    }\n\n    searchUpdated (term) {\n        this.setState({searchTerm: term})\n    }\n\n    render() {\n        let { notes } = this.state\n        const filteredNotes = notes.filter(createFilter(this.state.searchTerm, KEYS_TO_FILTERS))\n\n        if(!notes.length) {\n            return (\n                <div className=\"app-intro\">\n                    <h2> There are no notes to search! </h2>\n                </div>\n            )\n        }\n        \n        return(\n            <div>\n                <h1>Search By Tag</h1>\n                <div className=\"note-form-field\">\n                    <SearchInput className=\"search-input\" onChange={this.searchUpdated} />\n                    <NoteList notes={filteredNotes} />\n                </div>\n            </div>\n        )\n    }\n}"]},"metadata":{},"sourceType":"module"}