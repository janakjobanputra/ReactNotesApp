{"ast":null,"code":"import _regeneratorRuntime from \"/Users/janakjobanputra/Documents/Git/ReactNotesApp/react-notes/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/janakjobanputra/Documents/Git/ReactNotesApp/react-notes/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/janakjobanputra/Documents/Git/ReactNotesApp/react-notes/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/janakjobanputra/Documents/Git/ReactNotesApp/react-notes/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport PouchDB from 'pouchdb';\n\nvar DB =\n/*#__PURE__*/\nfunction () {\n  function DB(name) {\n    _classCallCheck(this, DB);\n\n    this.db = new PouchDB('react-notes');\n  }\n\n  _createClass(DB, [{\n    key: \"getAllNotes\",\n    value: function () {\n      var _getAllNotes = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var allNotes, notes;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.db.allDocs({\n                  include_docs: true\n                });\n\n              case 2:\n                allNotes = _context.sent;\n                notes = {};\n                allNotes.rows.forEach(function (n) {\n                  return notes[n.id] = n.doc;\n                });\n                return _context.abrupt(\"return\", notes);\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function getAllNotes() {\n        return _getAllNotes.apply(this, arguments);\n      };\n    }()\n  }]);\n\n  return DB;\n}();\n\nexport { DB as default };","map":{"version":3,"sources":["/Users/janakjobanputra/Documents/Git/ReactNotesApp/react-notes/src/db.js"],"names":["PouchDB","DB","name","db","allDocs","include_docs","allNotes","notes","rows","forEach","n","id","doc"],"mappings":";;;;AAAA,OAAOA,OAAP,MAAoB,SAApB;;IAEqBC,E;;;AACjB,cAAYC,IAAZ,EAAkB;AAAA;;AACd,SAAKC,EAAL,GAAU,IAAIH,OAAJ,CAAY,aAAZ,CAAV;AACH;;;;;;;;;;;;;;uBAGwB,KAAKG,EAAL,CAAQC,OAAR,CAAgB;AAAEC,kBAAAA,YAAY,EAAE;AAAhB,iBAAhB,C;;;AAAjBC,gBAAAA,Q;AACAC,gBAAAA,K,GAAQ,E;AAEZD,gBAAAA,QAAQ,CAACE,IAAT,CAAcC,OAAd,CAAsB,UAAAC,CAAC;AAAA,yBAAIH,KAAK,CAACG,CAAC,CAACC,EAAH,CAAL,GAAcD,CAAC,CAACE,GAApB;AAAA,iBAAvB;iDAEOL,K;;;;;;;;;;;;;;;;;;;SAXMN,E","sourcesContent":["import PouchDB from 'pouchdb';\n\nexport default class DB {\n    constructor(name) {\n        this.db = new PouchDB('react-notes');\n    }\n\n    async getAllNotes() {\n        let allNotes = await this.db.allDocs({ include_docs: true});\n        let notes = {};\n\n        allNotes.rows.forEach(n => notes[n.id] = n.doc)\n\n        return notes;\n    }\n}"]},"metadata":{},"sourceType":"module"}